// @describe triangle(point = up, size = 1em, color = #777)

// @it output a defualt triangle when no parameters are passed
.triangle
  triangle()

// @expect
.triangle {
  width: 0;
  height: 0;
  border-right: 1em solid transparent;
  border-bottom: 1em solid #777;
  border-left: 1em solid transparent;
}

// @it output in any any of 8 different directions
.triangle--up-left
  triangle(up-left)
.triangle--up
  triangle(up)
.triangle--up-right
  triangle(up-right)
.triangle--right
  triangle(right)
.triangle--down-right
  triangle(down-right)
.triangle--down
  triangle(down)
.triangle--down-left
  triangle(down-left)
.triangle--left
  triangle(left)

// @expect
.triangle--up-left {
  width: 0;
  height: 0;
  border-top: 1em solid #777;
  border-right: 1em solid transparent;
  border-bottom: 1em solid transparent;
  border-left: 1em solid #777;
}
.triangle--up {
  width: 0;
  height: 0;
  border-right: 1em solid transparent;
  border-bottom: 1em solid #777;
  border-left: 1em solid transparent;
}
.triangle--up-right {
  width: 0;
  height: 0;
  border-top: 1em solid #777;
  border-right: 1em solid #777;
  border-bottom: 1em solid transparent;
  border-left: 1em solid transparent;
}
.triangle--right {
  width: 0;
  height: 0;
  border-top: 1em solid transparent;
  border-bottom: 1em solid transparent;
  border-left: 1em solid #777;
}
.triangle--down-right {
  width: 0;
  height: 0;
  border-top: 1em solid transparent;
  border-right: 1em solid #777;
  border-bottom: 1em solid #777;
  border-left: 1em solid transparent;
}
.triangle--down {
  width: 0;
  height: 0;
  border-top: 1em solid #777;
  border-right: 1em solid transparent;
  border-left: 1em solid transparent;
}
.triangle--down-left {
  width: 0;
  height: 0;
  border-top: 1em solid transparent;
  border-right: 1em solid transparent;
  border-bottom: 1em solid #777;
  border-left: 1em solid #777;
}
.triangle--left {
  width: 0;
  height: 0;
  border-top: 1em solid transparent;
  border-right: 1em solid #777;
  border-bottom: 1em solid transparent;
}


// @it output a custom triangle when width and/or color parameters are passed
.class1
  triangle(right, 6px, #f00)
.class2
  triangle(right, , #00f)
.class3
  triangle(right, 10px)

// @expect
.class1 {
  width: 0;
  height: 0;
  border-top: 6px solid transparent;
  border-bottom: 6px solid transparent;
  border-left: 6px solid #f00;
}
.class2 {
  width: 0;
  height: 0;
  border-top: 1em solid transparent;
  border-bottom: 1em solid transparent;
  border-left: 1em solid #00f;
}
.class3 {
  width: 0;
  height: 0;
  border-top: 10px solid transparent;
  border-bottom: 10px solid transparent;
  border-left: 10px solid #777;
}


// @it output nothing if passed parameters are not the expected type
.correct
  triangle('right', 3em, #0f0)
.incorrect-direction
  triangle('blah', 3em, #0f0)
.incorrect-unit
  triangle('left', foo, #0f0)
.incorrect-color
  triangle('left', 3em, bar)
.incorrect-order
  triangle('left', #0f0, 3em)
.missing-width-color
  triangle('left', 'foo', 'bar')
.missing-width
  triangle('left', #0f0)
.missing-width
  triangle('left', '', #0f0)

// @expect
.correct {
  width: 0;
  height: 0;
  border-top: 3em solid transparent;
  border-bottom: 3em solid transparent;
  border-left: 3em solid #0f0;
}
