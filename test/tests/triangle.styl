// @describe triangle()

// @it should output a defualt triangle when no parameters are passed
.element
  triangle()

// @expect
.element {
  width: 0;
  height: 0;
  border-right: 1em solid transparent;
  border-bottom: 1em solid #777;
  border-left: 1em solid transparent;
}

// @it should output in any any of 8 different directions
.element--up-left
  triangle('up-left')
.element--up
  triangle('up')
.element--up-right
  triangle('up-right')
.element--right
  triangle('right')
.element--down-right
  triangle('down-right')
.element--down
  triangle('down')
.element--down-left
  triangle('down-left')
.element--left
  triangle('left')

// @expect
.element--up-left {
  width: 0;
  height: 0;
  border-top: 0.5em solid #777;
  border-right: 0.5em solid transparent;
  border-bottom: 0.5em solid transparent;
  border-left: 0.5em solid #777;
}
.element--up {
  width: 0;
  height: 0;
  border-right: 1em solid transparent;
  border-bottom: 1em solid #777;
  border-left: 1em solid transparent;
}
.element--up-right {
  width: 0;
  height: 0;
  border-top: 0.5em solid #777;
  border-right: 0.5em solid #777;
  border-bottom: 0.5em solid transparent;
  border-left: 0.5em solid transparent;
}
.element--right {
  width: 0;
  height: 0;
  border-top: 1em solid transparent;
  border-bottom: 1em solid transparent;
  border-left: 1em solid #777;
}
.element--down-right {
  width: 0;
  height: 0;
  border-top: 0.5em solid transparent;
  border-right: 0.5em solid #777;
  border-bottom: 0.5em solid #777;
  border-left: 0.5em solid transparent;
}
.element--down {
  width: 0;
  height: 0;
  border-top: 1em solid #777;
  border-right: 1em solid transparent;
  border-left: 1em solid transparent;
}
.element--down-left {
  width: 0;
  height: 0;
  border-top: 0.5em solid transparent;
  border-right: 0.5em solid transparent;
  border-bottom: 0.5em solid #777;
  border-left: 0.5em solid #777;
}
.element--left {
  width: 0;
  height: 0;
  border-top: 1em solid transparent;
  border-right: 1em solid #777;
  border-bottom: 1em solid transparent;
}


// @it should output a custom triangle when width and/or color parameters are passed
.element1
  triangle('right', 6px, #f00)
.element2
  triangle('right', , #00f)
.element3
  triangle('right', 10px)

// @expect
.element1 {
  width: 0;
  height: 0;
  border-top: 6px solid transparent;
  border-bottom: 6px solid transparent;
  border-left: 6px solid #f00;
}
.element2 {
  width: 0;
  height: 0;
  border-top: 1em solid transparent;
  border-bottom: 1em solid transparent;
  border-left: 1em solid #00f;
}
.element3 {
  width: 0;
  height: 0;
  border-top: 10px solid transparent;
  border-bottom: 10px solid transparent;
  border-left: 10px solid #777;
}


// @it should output nothing if passed parameters are not the expected type
.element1
  triangle('right', 3em, #0f0) // correct
.element2
  triangle('blah', 3em, #0f0) // incorrect-direction
.element3
  triangle('left', foo, #0f0) // incorrect-unit
.element4
  triangle('left', 3em, bar) // incorrect-color
.element5
  triangle('left', #0f0, 3em) // incorrect-order
.element6
  triangle('left', 'foo', 'bar') // missing-width-color
.element7
  triangle('left', #0f0) // missing-width
.element8
  triangle('left', '', #0f0) // missing-width

// @expect
.element1 {
  width: 0;
  height: 0;
  border-top: 3em solid transparent;
  border-bottom: 3em solid transparent;
  border-left: 3em solid #0f0;
}
