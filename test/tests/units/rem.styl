// @describe rem()

// @it should convert pixel value into rem value
.element
  margin rem(16) // 16/16 = 1

// @expect
.element {
  margin: 1rem;
}

// @it should convert multiple pixel values into rem values
.element
  margin rem(32 16) // 32/16 = 2, 16/16 = 1

// @expect
.element {
  margin: 2rem 1rem;
}

// @it should convert pixel value into rem value with $base--font-size
$base--font-size = 20px

.element
  margin rem(16) // 16/20 = 0.8

// @expect
.element {
  margin: 0.8rem;
}

// @it should convert multiple pixel values into rem values with $base--font-size
$base--font-size = 20px

.element
  margin rem(32 16) // 32/20 = 1.6, 16/20 = 0.8

// @expect
.element {
  margin: 1.6rem 0.8rem;
}

// @it should convert pixel value into rem value with supplied base unit
$base--font-size = 22px
.element
  margin rem(32 16, $base--font-size) // 32/20 = 1.455, 16/20 = 0.727

// @expect
.element {
  margin: 1.455rem 0.727rem;
}

// @it should not fail when passed a zero value
.element
  margin rem(0)

// @expect
.element {
  margin: 0;
}

// @it should not fail when passed a `px` unit type
.element
  margin rem(16px)

// @expect
.element {
  margin: 1rem;
}

// @it should not output rem when passed a zero value
.element
  margin rem(0 32) // 32/16 = 2.0

// @expect
.element {
  margin: 0 2rem;
}

// @it should convert pixel value to rem for IE9+
$is-ie = true
$is-ie--version = 9

.element
  margin rem(16)

// @expect
.element {
  margin: 1rem;
}

// @it should convert multiple pixel values to rem for IE9+
$is-ie = true
$is-ie--version = 9

.element
  margin rem(32 16)

// @expect
.element {
  margin: 2rem 1rem;
}

// @it should not convert pixel value to rem for IE8-
$is-ie = true
$is-ie--version = 8

.element
  margin rem(16)

// @expect
.element {
  margin: 16px;
}

// @it should not convert multiple pixel values to rem for IE8-
$is-ie = true
$is-ie--version = 8

.element
  margin rem(32 16)

// @expect
.element {
  margin: 32px 16px;
}
